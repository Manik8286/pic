@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

// Clearfix to force an element to self-clear its children.
//
// Compatible with all Browsers.
@mixin clearfix {
  *zoom:1;

  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

// Get z-index from depth-map
//
// Compatible with all Browsers.
@mixin z-index($type, $calc: 0) {
  z-index: z-index($depth, $type) + $calc;
}


// Media query helper
//
// $size - Breakpoint: s/m/l/xml
//
// Compatible in IE9+ and all other Browsers.
@mixin break($size) {
  @if map-has-key($breakpoints, $size) == false {
    @warn "Breakpoint '#{$size}' is invalid.";
  }

  @media #{map-get($breakpoints, $size)} {
    @content;
  }
}

@mixin col($span, $context: 12) {
  width: 100% * ($span/$context);
}

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}